import sys

def solve(n: int, m: int, pos: list):
    # フィールドセット
    box_len = 2*n+1
    check = [[0]*(box_len) for _ in range(box_len)]
    # print(check)

    pos_dict = {}
    for row in pos:
        if row[0] not in pos_dict:
            pos_dict[row[0]] = [row[1]]
        else:
            pos_dict[row[0]] += [row[1]]
    
    # print(pos_dict)
    
    check[0][n] = 1

    # xは行
    for x in range(1, box_len):
        # 上の行をコピー
        check[x] = check[x-1]
        # この行に黒ポーンがなければ飛ばす
        if x not in pos_dict:
            continue
        # 黒ポーンのある場所は斜め上を確認して上書き
        for y in pos_dict[x]:
            nw = 0 if y == 0 else check[x-1][y-1]
            ne = 0 if y == 2*n else check[x-1][y+1]
            check[x][y] = 0 if nw == ne == 0 else 1
            

    # print(res)
    print(sum(check[-1]))

    return


# Generated by 2.3.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    source = sys.stdin.read().splitlines()
    n, m = map(int, source[0].split())
    black_pos = [[int(i) for i in row.split()] for row in source[1:m+1]]

    # print(n,m)
    # print(black_pos)

    solve(n, m, black_pos)

if __name__ == '__main__':
    main()
